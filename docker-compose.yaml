version: '3.7'

services:
  db:
    image: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD
      - MYSQL_DATABASE=antidemo
      - MYSQL_USER=$MYSQL_USER
      - MYSQL_PASSWORD=$MYSQL_PASSWORD
      - TZ=Europe/Paris
    restart: always
    networks:
      - db
    volumes:
      - db:/var/lib/mysql
    ports:
      - 3306:3306
    healthcheck:
      test: sh -c 'mysqladmin -p$MYSQL_ROOT_PASSWORD ping'
      interval: 5s
      timeout: 10s
      start_period: 30s
  app:
    image: antidemo
    build: .
    restart: always
    environment:
      - DATABASE_HOST=db
      - DATABASE_TABLE=antidemo
      - DATABASE_USER=$MYSQL_USER
      - DATABASE_PASSWORD=$MYSQL_PASSWORD
    networks:
      - db
      - front
    depends_on:
      db:
        condition: service_healthy
  proxy:
    image: nginx # https://hub.docker.com/_/nginx
    restart: always
    environment:
      - NGINX_PORT=8082
      - NGINX_PUBLISHED_PORT=8082
      - NGINX_PROXY_HOST=app
      - NGINX_PROXY_PORT=8091
    networks:
      - front
    volumes:
      - ./ext_config/nginx:/etc/nginx/templates
    ports:
      - 8082:8082 # Must be NGINX_PUBLISHED_PORT:NGINX_PORT
  prometheus:
    image: prom/prometheus:latest
    ports:
    - 9090:9090
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    volumes:
    - ./ext_config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    - metrics:/prometheus
    depends_on:
    - cadvisor
    networks:
    - metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.1
    container_name: cadvisor
    command:
    - --enable_metrics=cpu,memory,network,diskIO
    - --store_container_labels=false
    - --whitelisted_container_labels=com.docker.compose.service,image,name
    - --docker_only=true
    - --disable_root_cgroup_stats=true
    ports:
    - 8080:8080
    devices:
    - /dev/kmsg:/dev/kmsg
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:ro
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    - /dev/disk/:/dev/disk:ro
    - /var/run/docker.sock:/var/run/docker.sock:rw
    - /etc/machine-id:/etc/machine-id:ro
    privileged: true
    depends_on:
    - app
    - proxy
    networks:
    - metrics
volumes:
  db:
  metrics:
networks:
  front:
  db:
  metrics:
